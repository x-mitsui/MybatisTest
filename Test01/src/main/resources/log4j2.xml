<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和 重新配置本身，设置间隔秒数-->
<Configuration status="WARN" monitorInterval="60">
    <!-- 变量配置 -->
    <Properties>
        <Property name="log_path">./logs</Property>
    </Properties>

    <!-- appender配置 -->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %5p %X{traceId} -- %m%n" />
        </Console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="SYSTEM" fileName="${log_path}/system.log" filePattern="${log_path}/system.log.%d{yyyy-MM-dd}-%i">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %5p %X{traceId} -- %m%n" />
            <!-- Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
                TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
                SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.-->
            <Policies>
                <SizeBasedTriggeringPolicy size="200M"/>
            </Policies>
            <Filters>
                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
                <ThresholdFilter level="info" onMatch="NEUTRAL" onMismatch="DENY" />
                <ContextMapFilter onMatch="DENY" onMismatch="ACCEPT" operator="and">
                    <KeyValuePair key="logFilter" value="true"/>
                </ContextMapFilter>
            </Filters>
            <!-- DefaultRolloverStrategy属性用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性),
            如不设置，则默认为最多同一文件夹下7个文件，这里设置了180 -->
            <DefaultRolloverStrategy max="180">
                <Delete basePath="${log_path}">
                    <IfFileName glob="*.log.*" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>


        <RollingFile name="ERROR" fileName="${log_path}/error.log"
                     filePattern="${log_path}/error.log.%d{yyyy-MM-dd}-%i">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %5p %X{traceId} -- %m%n" />
            <Policies>
                <SizeBasedTriggeringPolicy size="200M"/>
            </Policies>
            <Filters>
                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20">
                <Delete basePath="${log_path}">
                    <IfFileName glob="*.log.*" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

    </Appenders>
    <Loggers>
        <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
        <!--过滤掉一些无用的信息-->
        <logger name="com.na.guard.datasource.service" level="WARN"/>

        <!--　AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。-->

        <AsyncLogger name="com.na.dds.iss" level="info" additivity="false">
            <AppenderRef ref="SYSTEM" />
            <AppenderRef ref="ERROR" />
        </AsyncLogger>

        <Root level="info">
            <AppenderRef ref="SYSTEM" />
            <AppenderRef ref="ERROR" />
        </Root>
    </Loggers>
</Configuration>
